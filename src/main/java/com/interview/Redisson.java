package com.interview;

/**
 * @ClassName: {NAME}
 * @Auther: why
 * @Date: 2023/07/11 07 28
 * @Version: v1.0
 */
public class Redisson {
    //不可重入
    //同一个线程无法多次获取同一把锁

    //不可重试
    //获取锁只尝试一次就返回false，没有重试机制

    //超时释放
    //锁超时释放虽然可以避免死锁，
    //但如果是业务执行耗时较长，也会导致锁释放，存在安全隐患

    //主从一致性
    //如果Redis提供了主从集群,主从同步存在延迟，
    // 当主宕机时，如果从并同步主中的锁数据，则会出现锁实现

    /**
     * 1)不可重入Redis分布式锁:
     * 原理:
     * 利用setnx的互斥性;利用ex避免死锁;
     * 释放锁时判断线程标示
     * 缺陷:不可重入、无法重试、锁超时失效
     * 2)可重入的Redis分布式锁:
     * 原理:
     * 利用hash结构，记录线程标示和重入次数;利
     * 用watchDog延续锁时间;利用信号量控制锁重试等待
     * 缺陷: redis宕机引起锁失效问题
     * 3) Redisson的multiLock:
     * 原理:
     * 多个独立的Redis节点，必须在所有节点都获取重入锁，
     * 才算获取锁成功
     * 缺陷:运维成本高、实现复杂
     */
}
