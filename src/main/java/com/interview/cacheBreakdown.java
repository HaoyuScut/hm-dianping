package com.interview;

/**
 * @ClassName: {NAME}
 * @Auther: why
 * @Date: 2023/07/06 22 57
 * @Version: v1.0
 */
public class cacheBreakdown {

    /**
     *缓存击穿问题也叫热点key问题。就是一个被高并发访问并且缓存重建业务
     *较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击
     *
     * 解决方案：
     * 互斥锁：
     * 线程一：
     * 1.查询缓存，未命中
     * 2.获取互斥锁成功
     * 3.查询数据库重建缓存数据
     * 4.写入缓存
     * 5.释放锁
     *
     * 线程二：
     * 1.查询缓存未命中
     * 2.获取互斥锁失败
     * 3.休眠一会儿再重试
     * 4.缓存命中
     *
     * 优点：
     * 1.没有额外内存消耗（逻辑过期时间）
     * 2.保证一致性
     * 3.实现简单
     *
     * 缺点：
     * 1.线程等待,性能较差
     * 2.可能有死锁风险
     */

    /**
     * 逻辑过期
     * 在存储一个字段时，不设置过期时间（添加逻辑过期时间）
     *
     * 线程一：
     * 1.查询缓存，发现逻辑时间已过期
     * 2.获取互斥锁成功
     * 3.创建新线程：
     *     3.1 查询数据库重建缓存数据
     *     3.2 写入缓存
     *     3.3 释放锁
     * 4. 返回过期数据
     *
     * 线程二：
     * 1.查询缓存，发现逻辑时间已过期
     * 2.获取互斥锁失败
     * 3.返回过期数据
     *
     * 优点：
     * 线程无需等待，性能较好
     * 缺点：
     * 1.不保证一致性
     * 2.有额外内存消耗
     * 3.实现复杂
     */
}
* 3