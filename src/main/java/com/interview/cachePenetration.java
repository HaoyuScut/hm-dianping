package com.interview;

/**
 * @ClassName: {NAME}
 * @Auther: why
 * @Date: 2023/07/06 22 14
 * @Version: v1.0
 * 缓存穿透
 */
public class cachePenetration {
    /**
     * 缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在
     * 这样缓存永远不会生效，这些请求都会打到数据库
     * 1.缓存空对象：当收到请求，如果都不存在时，将空的值进行缓存，
     * 这样就可以防止，对此恶意请求。
     * 缺点：（1）有额外的内存消耗 解决方法：设置一个较短的TTL
     *      （2）可能造成短期的不一致
     */

    /**
     * 2.布隆过滤器
     * 当用户请求来的时候，不先去访问缓存，而是先访问布隆过滤器
     * 询问数据是否存在：
     * （1）如果不存在，会被拒绝访问
     * （2）存在则放行
     * （3）如缓存命中，则返回
     * （4）如缓存未命中，则查询数据库,然后对数据进行缓存并返回
     * 优点：内存占用较少，没有多余key
     * 缺点：
     * （1）实现复杂
     * （2）存在误判可能
     */

    /**
     * 缓存穿透的解决方案：
     * 1.缓存空值
     * 2.布隆过滤
     * 3.增强id的复杂度，避免被猜测id规律
     * 4.做好数据的基础格式校验
     * 5.加强用户权限校验
     * 6.做好热点参数的限流
     */
}
